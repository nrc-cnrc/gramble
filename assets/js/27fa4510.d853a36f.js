"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3467],{1146:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=n(4848),r=n(8453);const i={id:"contains",title:"contains",sidebar_label:"contains"},c=void 0,o={id:"reference/headerOps/contains",title:"contains",description:"Description",source:"@site/docs/reference/headerOps/contains.md",sourceDirName:"reference/headerOps",slug:"/reference/headerOps/contains",permalink:"/gramble/docs/reference/headerOps/contains",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"contains",title:"contains",sidebar_label:"contains"},sidebar:"docSidebar",previous:{title:"Header Operators",permalink:"/gramble/docs/category/header-operators"},next:{title:"ends",permalink:"/gramble/docs/reference/headerOps/ends"}},l={},d=[{value:"Description",id:"description",level:2},{value:"Usage examples",id:"usage-examples",level:2},{value:"Details",id:"details",level:2}];function a(e){const t={a:"a",code:"code",em:"em",h2:"h2",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"contains"})," operator lets you filter a grammar so that only forms where the field contains a particular string/regex are generated."]}),"\n",(0,s.jsxs)(t.p,{children:["Like ",(0,s.jsx)(t.code,{children:"equals"}),"/",(0,s.jsx)(t.code,{children:"starts"}),"/",(0,s.jsx)(t.code,{children:"ends"}),", ",(0,s.jsx)(t.code,{children:"rename"})," and ",(0,s.jsx)(t.code,{children:"hide"}),", ",(0,s.jsx)(t.code,{children:"contains"})," applies to the content immediately to its left, but can be chained."]}),"\n",(0,s.jsx)(t.h2,{id:"usage-examples",children:"Usage examples"}),"\n",(0,s.jsxs)(t.p,{children:["For example, we could filter ",(0,s.jsx)(t.strong,{children:"A"}),' only to entries where the text contains "p", "t", or "k":']}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"B =\xa0"})}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"embed"})}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"contains text"})})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"A"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"p|t|k"})]})})]}),"\n",(0,s.jsxs)(t.p,{children:["Like ",(0,s.jsx)(t.code,{children:"equals"}),", content below ",(0,s.jsx)(t.code,{children:"contains"})," is interpreted as a regex."]}),"\n",(0,s.jsxs)(t.p,{children:["For a negative example, the following filters ",(0,s.jsx)(t.strong,{children:"A"})," only to those entries where the text ",(0,s.jsx)(t.em,{children:"doesn't"}),' contain "p", "t", or "k".']}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"B =\xa0"})}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"embed"})}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"contains text"})})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"A"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"~(p|t|k)"})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"details",children:"Details"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"contains"})," operator is a convenience version of the ",(0,s.jsx)(t.code,{children:"equals"})," operator, that converts the regex given into a more complex one.  For example, in the first example above, it is converted to ",(0,s.jsx)(t.code,{children:".*(p|t|k).*"}),".  In the second example, it is converted to ",(0,s.jsx)(t.code,{children:"~(.*(p|t|k).*)"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"contains"})," operator has the same complications and cautions about negation scope as the ",(0,s.jsx)(t.code,{children:"starts"})," operator, which you can read about ",(0,s.jsx)(t.a,{href:"starts",children:"here"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var s=n(6540);const r={},i=s.createContext(r);function c(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);