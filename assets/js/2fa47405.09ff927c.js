"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2368],{5011:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var s=n(4848),r=n(8453);const l={id:"optional",title:"optional",sidebar_label:"optional"},i=void 0,d={id:"reference/headerOps/optional",title:"optional",description:"Description",source:"@site/docs/reference/headerOps/optional.md",sourceDirName:"reference/headerOps",slug:"/reference/headerOps/optional",permalink:"/gramble/docs/reference/headerOps/optional",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"optional",title:"optional",sidebar_label:"optional"},sidebar:"docSidebar",previous:{title:"hide",permalink:"/gramble/docs/reference/headerOps/hide"},next:{title:"rename (>)",permalink:"/gramble/docs/reference/headerOps/rename"}},o={},c=[{value:"Description",id:"description",level:2},{value:"Usage examples",id:"usage-examples",level:2},{value:"Why would we want to use this?",id:"why-would-we-want-to-use-this",level:2}];function a(e){const t={code:"code",h2:"h2",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"optional"}),' is a header operator allowing the expression of "add <something> to field <F>", or add nothing".  E.g., ',(0,s.jsx)(t.code,{children:"optional F:x"})," is equivalent to adding the alternation of ",(0,s.jsx)(t.code,{children:"F:x"})," with the empty grammar."]}),"\n",(0,s.jsx)(t.h2,{id:"usage-examples",children:"Usage examples"}),"\n",(0,s.jsx)(t.p,{children:"Just for illustration, consider the following grammar."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"A =\xa0"})}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"gloss"})}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"optional text"})})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"past"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"ba"})]})})]}),"\n",(0,s.jsxs)(t.p,{children:["This produces two entries: ",(0,s.jsx)(t.code,{children:"{gloss:past, text:ba}"})," and ",(0,s.jsx)(t.code,{children:"{gloss:past}"}),", because ",(0,s.jsx)(t.code,{children:"optional text:ba"})," can either add ",(0,s.jsx)(t.code,{children:"ba"})," to ",(0,s.jsx)(t.code,{children:"text"})," or just add the empty string."]}),"\n",(0,s.jsx)(t.h2,{id:"why-would-we-want-to-use-this",children:"Why would we want to use this?"}),"\n",(0,s.jsxs)(t.p,{children:["The above is not the usual use case (it'd be more readable just to add another line to the table rather than use ",(0,s.jsx)(t.code,{children:"optional"}),"); ",(0,s.jsx)(t.code,{children:"optional"})," is usually used with ",(0,s.jsx)(t.code,{children:"embed"})," to express the possible absence of a morpheme.  For example, consider this grammar:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"Root =\xa0"})}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"text"})}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"gloss"})})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"gan"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"run"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"ik"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"jump"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\xa0"}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"Evid ="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"text"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"gloss"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"a"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"direct"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"ba"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"hearsay"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"tsu"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"infer"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\xa0"}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"Stem ="})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"embed"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:(0,s.jsx)(t.strong,{children:"optional embed"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Root"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"Evid"})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["In this grammar, ",(0,s.jsx)(t.code,{children:"optional embed: Evid"})," is a way of expressing that the evidentiality morpheme is optional.  (In this simple example, yes, we could have just added another line to the ",(0,s.jsx)(t.code,{children:"Stem"})," symbol, but in a more complex grammar we might not want to double the number of lines in ",(0,s.jsx)(t.code,{children:"Stem"})," just for this.  When the column is always optional, it's best to express this in a columnar way with ",(0,s.jsx)(t.code,{children:"optional"})," rather than adding rows.)"]}),"\n",(0,s.jsxs)(t.p,{children:["Also note that, by the rules of Gramble syntax, we can't express the ability to leave out evidentiality by adding a line to ",(0,s.jsx)(t.code,{children:"Evid"})," that's empty in every field -- it would just be interpreted as an empty line and ignored.  ",(0,s.jsx)(t.code,{children:"optional"})," lets you get around that."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var s=n(6540);const r={},l=s.createContext(r);function i(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);